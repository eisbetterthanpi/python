



def de_bruijn(k, n: int):
    str='0123456789'
    #str='abcdefghijklmnopqrstuvwxyz'
    try:
        # let's see if k can be cast to an integer; 
        # if so, make our alphabet a list 
        _ = int(k)
        print(type(str),str,type(k),k)
        alphabet = list(map(str, range(k)))
        print(type(alphabet),alphabet)
    except (ValueError, TypeError):
        alphabet = k
        k = len(k)
        print('e',type(alphabet),alphabet)
    a = [0] * k * n
    sequence = []
    def db(t, p):
        if t > n:
            if n % p == 0:
                sequence.extend(a[1:p + 1]) 
        else:
            a[t] = a[t - p]
            db(t + 1, p)
            for j in range(a[t - p] + 1, k):
                a[t] = j
                db(t + 1, t)
    db(1, 1)
    return "".join(alphabet[i] for i in sequence)
#print(de_bruijn(2, 3)) 
#print(de_bruijn("abcd", 2))



'''




#""" de Bruijn sequence for alphabet k and subsequences of length n. """

def de_bruijn(k, n:int): 
    try: 
# let's see if k can be cast to an integer; 
# if so, make our alphabet a list 
        _ = int(k)
        alphabet = list(map(str, range(k)))
    except (ValueError, TypeError):
        alphabet = k 
        k = len(k)
    a = [0] * k * n
    sequence = []
    def db(t, p):
        if t > n:
            if n % p == 0:
                sequence.extend(a[1:p + 1])
        else:
            a[t] = a[t - p]
            db(t + 1, p)
        for j in range(a[t - p] + 1, k):
            a[t] = j
            db(t + 1, t)
            db(1, 1)
    return "".join(alphabet[i] for i in sequence)
'''

if __name__ == '__main__':
    print(de_bruijn(2,3))
    #print(de_bruijn("abc",3))
    #de_bruijn()










""" de Bruijn sequence for alphabet k and subsequences of length n. """

def de_bruijn(k, n):
    try: 
# let's see if k can be cast to an integer; 
# if so, make our alphabet a list 
        _ = int(k)
        alphabet = list(map(str, range(k)))
    except (ValueError, TypeError):
        alphabet = k 
        k = len(k)
    a = [0] * k * n
    sequence = []
    def db(t, p):
        if t > n:
            if n % p == 0:
                sequence.extend(a[1:p + 1])
        else:
            a[t] = a[t - p]
            db(t + 1, p)
        for j in range(a[t - p] + 1, k):
            a[t] = j
            db(t + 1, t)
            db(1, 1)
    return "".join(alphabet[i] for i in sequence)
print(de_bruijn(2,3))
print(de_bruijn("abcd",2))





