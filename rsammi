
#modular multiplicative inverse
#d?*e=1mod(a)
#413*17=1mod(780)

#a=int(870)
#e=int(17) #coprime
def mmi(a,e):
    k=int(a//e+1)
    b=k*e-a
    #print(k,b)
    t=int(b)
    for c in range(1,e):
        
        if t%e==1:
            o=int(t//e)
            break
        t+=b
        #print(b,c,t%e)
    d=k*(c)-o
    #break
    return d#,' * ',e,' = 1 (mod ',a,')',(d*e,a*c,(d*e)-(a*c),((d*e)-(a*c))//e,((d*e)-(a*c))%e)




#encryption
def c(m):
    return m**e%n

#decryption
#private keys d,n=413,3233
def m(c):
    return c**d%n

if __name__ == '__main__':
    
    import time
    start=time.time()

    #lcm gcd function works with multiple arguments
    #print(lcm(49,18,56))
    
    
    p,q=61,53
    n,e=p*q,17 #public key
    
    a=lcm(p-1,q-1)
    d=mmi(a,e)
    #print(e,a)
    #print(eea(17,780,1))
    #d=eea(e,a,1)[0]
    message=2840
    crypt=c(message)
    dcode=m(crypt)
    print(crypt,dcode)
    
    print(time.time()-start)
    
